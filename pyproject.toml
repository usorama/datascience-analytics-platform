[tool.poetry]
name = "datascience-platform"
version = "0.1.0"
description = "A comprehensive DataScience Analytics Platform for ETL operations, data validation, and analytics"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [{include = "datascience_platform", from = "src"}]

[tool.poetry.dependencies]
python = "^3.9"
polars = "^0.20.0"
pandas = "^2.1.0"
scikit-learn = "^1.3.0"
plotly = "^5.17.0"
click = "^8.1.0"
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
fastapi = "^0.104.0"
pandera = "^0.17.0"
numpy = ">=1.21.0,<2.0.0"
uvicorn = {extras = ["standard"], version = "^0.24.0"}

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
black = "^23.10.0"
ruff = "^0.1.0"
mypy = "^1.7.0"
pytest-cov = "^4.1.0"
pre-commit = "^3.5.0"

[tool.poetry.scripts]
datascience-platform = "datascience_platform.__main__:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
pythonpath = [
    "src"
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]