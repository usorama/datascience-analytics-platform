name: QVF Platform E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - smoke
          - auth
          - dashboard
          - qvf
          - work-items
          - comparison
          - visual
          - performance
          - mobile
          - api

jobs:
  e2e-tests:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        project: [chromium, firefox, webkit]
        
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: qvf_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        
    - name: Install dependencies
      run: |
        pnpm install --frozen-lockfile
        pip install -r apps/api/requirements.txt
        
    - name: Setup test database
      run: |
        cd apps/api
        python -c "
        import sqlite3
        conn = sqlite3.connect('test.db')
        conn.execute('''
          CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT UNIQUE,
            password_hash TEXT,
            role TEXT,
            full_name TEXT
          )
        ''')
        
        # Insert test users
        import hashlib
        users = [
          ('executive', 'executive123', 'executive', 'Executive User'),
          ('product_owner', 'po123', 'product_owner', 'Product Owner'),
          ('scrum_master', 'sm123', 'scrum_master', 'Scrum Master'),
          ('developer', 'dev123', 'developer', 'Developer User')
        ]
        
        for username, password, role, full_name in users:
          password_hash = hashlib.sha256(password.encode()).hexdigest()
          try:
            conn.execute('INSERT INTO users (username, password_hash, role, full_name) VALUES (?, ?, ?, ?)',
                        (username, password_hash, role, full_name))
          except sqlite3.IntegrityError:
            pass  # User already exists
        
        conn.commit()
        conn.close()
        print('Test database setup complete')
        "
        
    - name: Install Playwright Browsers
      run: pnpm exec playwright install --with-deps ${{ matrix.project }}
      
    - name: Start backend services
      run: |
        cd apps/api
        export PYTHONPATH=src
        export DATABASE_URL=sqlite:///test.db
        python -m uvicorn qvf_api.main:app --port 8000 &
        echo $! > api.pid
        
        # Wait for API to be ready
        timeout 30 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
        
    - name: Start frontend
      run: |
        cd apps/web
        export NEXT_PUBLIC_API_URL=http://localhost:8000
        pnpm run build
        pnpm run start &
        echo $! > web.pid
        
        # Wait for frontend to be ready
        timeout 60 bash -c 'until curl -f http://localhost:3006; do sleep 2; done'
        
    - name: Run E2E Tests
      env:
        BASE_URL: http://localhost:3006
        API_BASE_URL: http://localhost:8000
        CI: true
      run: |
        case "${{ github.event.inputs.test_suite }}" in
          "smoke")
            pnpm exec playwright test --project=${{ matrix.project }} tests/auth/authentication.spec.ts tests/dashboard/navigation.spec.ts
            ;;
          "auth")
            pnpm exec playwright test --project=${{ matrix.project }} tests/auth/
            ;;
          "dashboard")
            pnpm exec playwright test --project=${{ matrix.project }} tests/dashboard/
            ;;
          "qvf")
            pnpm exec playwright test --project=${{ matrix.project }} tests/qvf/
            ;;
          "work-items")
            pnpm exec playwright test --project=${{ matrix.project }} tests/work-items/
            ;;
          "comparison")
            pnpm exec playwright test --project=${{ matrix.project }} tests/comparison/
            ;;
          "visual")
            pnpm exec playwright test --project=${{ matrix.project }} tests/visual/
            ;;
          "performance")
            pnpm exec playwright test --project=${{ matrix.project }} tests/performance/
            ;;
          "mobile")
            pnpm exec playwright test --project=${{ matrix.project }} tests/mobile/
            ;;
          "api")
            pnpm exec playwright test --project=api tests/api/
            ;;
          *)
            # Run all tests excluding visual regression on PR
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              pnpm exec playwright test --project=${{ matrix.project }} --ignore-snapshots
            else
              pnpm exec playwright test --project=${{ matrix.project }}
            fi
            ;;
        esac
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.project }}
        path: test-results/
        retention-days: 30
        
    - name: Upload HTML report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-html-report-${{ matrix.project }}
        path: test-results/html-report/
        retention-days: 30
        
    - name: Stop services
      if: always()
      run: |
        if [ -f apps/api/api.pid ]; then
          kill $(cat apps/api/api.pid) || true
        fi
        if [ -f apps/web/web.pid ]; then
          kill $(cat apps/web/web.pid) || true
        fi

  mobile-tests:
    timeout-minutes: 45
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        
    - name: Install dependencies
      run: |
        pnpm install --frozen-lockfile
        pip install -r apps/api/requirements.txt
        
    - name: Install Playwright Browsers
      run: pnpm exec playwright install --with-deps chromium
      
    - name: Setup services (same as above)
      run: |
        # Setup test database
        cd apps/api
        python -c "
        import sqlite3
        conn = sqlite3.connect('test.db')
        conn.execute('''
          CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT UNIQUE,
            password_hash TEXT,
            role TEXT,
            full_name TEXT
          )
        ''')
        
        import hashlib
        users = [
          ('executive', 'executive123', 'executive', 'Executive User'),
          ('product_owner', 'po123', 'product_owner', 'Product Owner'),
          ('scrum_master', 'sm123', 'scrum_master', 'Scrum Master'),
          ('developer', 'dev123', 'developer', 'Developer User')
        ]
        
        for username, password, role, full_name in users:
          password_hash = hashlib.sha256(password.encode()).hexdigest()
          try:
            conn.execute('INSERT INTO users (username, password_hash, role, full_name) VALUES (?, ?, ?, ?)',
                        (username, password_hash, role, full_name))
          except sqlite3.IntegrityError:
            pass
        
        conn.commit()
        conn.close()
        "
        
        # Start services
        export PYTHONPATH=src
        export DATABASE_URL=sqlite:///test.db
        python -m uvicorn qvf_api.main:app --port 8000 &
        echo $! > api.pid
        
        cd ../web
        export NEXT_PUBLIC_API_URL=http://localhost:8000
        pnpm run build
        pnpm run start &
        echo $! > web.pid
        
        # Wait for services
        timeout 30 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
        timeout 60 bash -c 'until curl -f http://localhost:3006; do sleep 2; done'
        
    - name: Run Mobile Tests
      env:
        BASE_URL: http://localhost:3006
        API_BASE_URL: http://localhost:8000
        CI: true
      run: |
        pnpm exec playwright test --project=mobile-chrome --project=mobile-safari tests/mobile/
        
    - name: Upload mobile test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-mobile-report
        path: test-results/
        retention-days: 30

  test-summary:
    runs-on: ubuntu-latest
    needs: [e2e-tests, mobile-tests]
    if: always()
    
    steps:
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: all-results
        
    - name: Generate test summary
      run: |
        echo "# QVF Platform E2E Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## Test Execution Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Suite**: ${{ github.event.inputs.test_suite || 'all' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -d "all-results" ]; then
          echo "## Artifacts Generated" >> $GITHUB_STEP_SUMMARY
          find all-results -name "*.json" -o -name "*.xml" -o -name "*.html" | head -20 | while read file; do
            echo "- $file" >> $GITHUB_STEP_SUMMARY
          done
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.e2e-tests.result }}" = "failure" ] || [ "${{ needs.mobile-tests.result }}" = "failure" ]; then
          echo "- ❌ Some tests failed. Check the individual job logs and artifacts." >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Review the HTML reports in the artifacts." >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 Visual regression failures might need baseline updates." >> $GITHUB_STEP_SUMMARY
        else
          echo "- ✅ All tests passed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 Ready for deployment or merge." >> $GITHUB_STEP_SUMMARY
        fi