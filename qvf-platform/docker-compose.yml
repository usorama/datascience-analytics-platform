services:
  # FastAPI Backend
  qvf-api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    container_name: qvf-api
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app/src
      - DATABASE_URL=sqlite:///./data/qvf.db
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - DEBUG=${DEBUG:-false}
      - ALLOWED_ORIGINS=http://localhost:3006,http://localhost:3000,http://qvf-web:3006
      - ADO_ORGANIZATION=${ADO_ORGANIZATION:-}
      - ADO_PROJECT=${ADO_PROJECT:-}
      - ADO_PAT_TOKEN=${ADO_PAT_TOKEN:-}
    volumes:
      - qvf_data:/app/data
      - qvf_logs:/app/logs
    networks:
      - qvf-network
    restart: unless-stopped
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Next.js Frontend
  qvf-web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=http://localhost:8000
        - QVF_API_URL=http://qvf-api:8000
    container_name: qvf-web
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - QVF_API_URL=http://qvf-api:8000
      - PORT=3006
    networks:
      - qvf-network
    restart: unless-stopped
    depends_on:
      qvf-api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3006/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: qvf-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - qvf-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-qvf-redis-password}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx reverse proxy (optional but recommended for production)
  nginx:
    image: nginx:alpine
    container_name: qvf-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - qvf-network
    restart: unless-stopped
    depends_on:
      - qvf-web
      - qvf-api
    profiles:
      - production

volumes:
  qvf_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data
  qvf_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs
  redis_data:
    driver: local

networks:
  qvf-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16