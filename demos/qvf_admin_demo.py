#!/usr/bin/env python3
"""QVF Admin Interface Demonstration

Demonstrates the complete QVF admin interface including:
- Dashboard generation
- API server integration
- Configuration management
- Real-time validation

This script shows how to use the QVF admin system in a production environment.
"""

import asyncio
import sys
import time
import webbrowser
from pathlib import Path
from contextlib import asynccontextmanager

# Add src to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from datascience_platform.qvf.ui.admin.dashboard_integration import (
    QVFAdminDashboardGenerator,
    QVFAdminConfig,
    generate_qvf_admin_dashboard
)
from datascience_platform.qvf.core.criteria import (
    QVFCriteriaEngine,
    create_agile_configuration,
    create_enterprise_configuration,
    create_startup_configuration
)


def demonstrate_dashboard_generation():
    """Demonstrate dashboard generation capabilities."""
    print("üéØ QVF Admin Dashboard Generation Demo")
    print("=" * 50)
    
    # 1. Generate with default settings
    print("\n1. Generating dashboard with default settings...")
    output_path = generate_qvf_admin_dashboard(
        output_dir="./outputs/qvf_admin_default",
        title="QVF Admin Dashboard - Default",
        api_base_url="/api/v1/qvf"
    )
    print(f"   ‚úÖ Generated at: {output_path}")
    
    # 2. Generate with custom configuration
    print("\n2. Generating dashboard with custom configuration...")
    custom_config = QVFAdminConfig(
        title="Enterprise QVF Management System",
        description="Advanced QVF configuration management for enterprise teams",
        output_dir=Path("./outputs/qvf_admin_enterprise"),
        theme="dark",
        enable_dark_mode=True,
        api_base_url="/api/v1/qvf",
        responsive=True,
        accessibility=True
    )
    
    generator = QVFAdminDashboardGenerator(custom_config)
    enterprise_path = generator.generate_admin_dashboard()
    print(f"   ‚úÖ Enterprise dashboard generated at: {enterprise_path}")
    
    # 3. Generate lightweight version
    print("\n3. Generating lightweight admin interface...")
    lightweight_path = generate_qvf_admin_dashboard(
        output_dir="./outputs/qvf_admin_light",
        title="QVF Quick Config",
        theme="light",
        enable_dark_mode=False
    )
    print(f"   ‚úÖ Lightweight version at: {lightweight_path}")
    
    print("\nüéâ Dashboard generation completed!")
    print("\nTo start any dashboard:")
    print("   cd <dashboard_path>")
    print("   npm install")
    print("   npm run dev")
    print("   Open http://localhost:3000")
    
    return output_path


def demonstrate_backend_integration():
    """Demonstrate QVF backend integration."""
    print("\nüîó QVF Backend Integration Demo")
    print("=" * 50)
    
    # Initialize QVF engine
    print("\n1. Initializing QVF criteria engine...")
    engine = QVFCriteriaEngine()
    
    # Create sample configurations
    print("\n2. Creating sample configurations...")
    configs = {
        'default': engine.get_default_configuration(),
        'agile': create_agile_configuration(),
        'enterprise': create_enterprise_configuration(),
        'startup': create_startup_configuration()
    }
    
    print(f"   ‚úÖ Created {len(configs)} configurations")
    
    # Validate configurations
    print("\n3. Validating configurations...")
    for name, config in configs.items():
        issues = engine.validate_configuration(config)
        status = "‚úÖ Valid" if len(issues) == 0 else f"‚ö†Ô∏è  {len(issues)} issues"
        print(f"   {name.capitalize()}: {status}")
        if issues:
            for issue in issues[:2]:  # Show first 2 issues
                print(f"     - {issue}")
    
    # Show configuration details
    print("\n4. Configuration details:")
    for name, config in configs.items():
        active_criteria = len(config.get_active_criteria())
        print(f"   {name.capitalize()}: {active_criteria} active criteria")
        
        # Show category weights
        weights = config.category_weights
        print(f"     Business Value: {weights.business_value:.1%}")
        print(f"     Strategic: {weights.strategic_alignment:.1%}")
        print(f"     Customer: {weights.customer_value:.1%}")
        print(f"     Complexity: {weights.implementation_complexity:.1%}")
        print(f"     Risk: {weights.risk_assessment:.1%}")
        print()
    
    return configs


async def demonstrate_api_server():
    """Demonstrate API server functionality."""
    print("\nüöÄ QVF API Server Demo")
    print("=" * 50)
    
    try:
        # Import FastAPI components
        from datascience_platform.qvf.api.main import app
        from datascience_platform.qvf.api.config_api import initialize_default_configurations
        import uvicorn
        
        print("\n1. Initializing API server...")
        
        # Initialize default configurations
        print("   Setting up default configurations...")
        initialize_default_configurations()
        print("   ‚úÖ Default configurations loaded")
        
        print("\n2. API Server would start at: http://localhost:8000")
        print("   Available endpoints:")
        print("     GET  /api/v1/qvf/configurations")
        print("     POST /api/v1/qvf/configurations")
        print("     GET  /api/v1/qvf/configurations/{id}")
        print("     PUT  /api/v1/qvf/configurations/{id}")
        print("     DELETE /api/v1/qvf/configurations/{id}")
        print("     POST /api/v1/qvf/validate/weights")
        print("     GET  /api/v1/qvf/presets")
        print("     GET  /health")
        
        print("\n   API Documentation: http://localhost:8000/api/docs")
        print("   Admin Interface: http://localhost:3000 (after dashboard generation)")
        
        # Note: In a real demo, we would start the server
        # For this demo, we'll just show what would happen
        print("\n   ‚ö†Ô∏è  Server not started in demo mode")
        print("   To start the server: python -m datascience_platform.qvf.api.main")
        
    except ImportError as e:
        print(f"   ‚ùå API server demo failed: {e}")
        print("   Install FastAPI and uvicorn: pip install fastapi uvicorn")


def demonstrate_complete_workflow():
    """Demonstrate complete workflow from backend to frontend."""
    print("\nüîÑ Complete QVF Workflow Demo")
    print("=" * 50)
    
    print("\n1. Backend Setup")
    print("   ‚úÖ QVF criteria engine initialized")
    print("   ‚úÖ Default configurations created")
    print("   ‚úÖ Validation system ready")
    
    print("\n2. API Layer")
    print("   ‚úÖ FastAPI endpoints configured")
    print("   ‚úÖ CORS enabled for development")
    print("   ‚úÖ Error handling implemented")
    
    print("\n3. Frontend Generation")
    print("   ‚úÖ React/TypeScript components generated")
    print("   ‚úÖ Tremor UI integration complete")
    print("   ‚úÖ Real-time validation hooks ready")
    
    print("\n4. Integration Points")
    print("   ‚úÖ API client with type safety")
    print("   ‚úÖ Real-time weight validation")
    print("   ‚úÖ Configuration import/export")
    print("   ‚úÖ Responsive design with accessibility")
    
    print("\n5. Production Ready Features")
    print("   ‚úÖ Error boundaries and loading states")
    print("   ‚úÖ Optimistic UI updates")
    print("   ‚úÖ Comprehensive validation feedback")
    print("   ‚úÖ Export/import functionality")
    print("   ‚úÖ Dark mode support")
    print("   ‚úÖ Mobile responsive design")
    
    print("\nüéâ Complete QVF admin system ready for deployment!")


def demonstrate_usage_examples():
    """Show practical usage examples."""
    print("\nüìã Usage Examples")
    print("=" * 50)
    
    print("\nQuick Start:")
    print("  # Generate admin dashboard")
    print("  python demos/qvf_admin_demo.py")
    print()
    print("  # Start API server")
    print("  python -m datascience_platform.qvf.api.main")
    print()
    print("  # Start frontend (in dashboard directory)")
    print("  npm install && npm run dev")
    
    print("\nProgrammatic Usage:")
    print("""
  from datascience_platform.qvf.ui import generate_qvf_admin_dashboard
  from datascience_platform.qvf.core.criteria import QVFCriteriaEngine
  
  # Generate dashboard
  dashboard_path = generate_qvf_admin_dashboard(
      output_dir="./my_qvf_admin",
      title="My QVF Admin",
      theme="dark"
  )
  
  # Use QVF engine
  engine = QVFCriteriaEngine()
  config = engine.get_default_configuration()
  issues = engine.validate_configuration(config)
    """)
    
    print("\nCLI Usage:")
    print("  # Generate with CLI")
    print("  python -m datascience_platform.qvf.ui.admin.cli generate")
    print("  python -m datascience_platform.qvf.ui.admin.cli generate --auto-install --auto-open")
    print("  python -m datascience_platform.qvf.ui.admin.cli serve --port 8080")
    print("  python -m datascience_platform.qvf.ui.admin.cli validate")


def main():
    """Run complete QVF admin demo."""
    print("üéØ QVF Admin Interface Complete Demonstration")
    print("=" * 80)
    print("This demo showcases the complete QVF admin system implementation")
    print("including backend, API, and frontend components.")
    print("=" * 80)
    
    try:
        # 1. Demonstrate backend integration
        configs = demonstrate_backend_integration()
        
        # 2. Demonstrate dashboard generation
        dashboard_path = demonstrate_dashboard_generation()
        
        # 3. Demonstrate API server (async)
        asyncio.run(demonstrate_api_server())
        
        # 4. Show complete workflow
        demonstrate_complete_workflow()
        
        # 5. Show usage examples
        demonstrate_usage_examples()
        
        # Summary
        print("\n" + "=" * 80)
        print("üéâ QVF Admin Demo Complete!")
        print("=" * 80)
        print(f"\nGenerated dashboards available in: ./outputs/")
        print("Next steps:")
        print("1. Choose a dashboard directory")
        print("2. Run 'npm install' to install dependencies")
        print("3. Run 'npm run dev' to start the development server")
        print("4. Start the API server with: python -m datascience_platform.qvf.api.main")
        print("5. Open http://localhost:3000 for the admin interface")
        print("\nüìö Documentation available in generated README.md files")
        
    except Exception as e:
        print(f"\n‚ùå Demo failed: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()